EduPredict Backend
EduPredict is an AI-powered system for student performance prediction and dropout risk analysis, built with FastAPI, MongoDB Atlas, Hadoop/HDFS, Redis, and Tableau.
Prerequisites

Python 3.11
MongoDB Atlas account
Hadoop 3.3.6 (HDFS)
Redis (for real-time notifications)
Tableau Server (for visualization)
Docker (optional)

Setup Instructions

Clone the Repository
git clone <repository-url>
cd edupredict


Install Dependencies
pip install -r requirements.txt


Configure Environment

Copy .env.example to .env and update values:cp .env.example .env


Set MONGODB_URL for MongoDB Atlas (e.g., mongodb+srv://<user>:<pass>@cluster0.mongodb.net/edupredict).
Set HDFS_HOST, HDFS_PORT, HDFS_USER for Hadoop.
Set REDIS_URL for Redis (e.g., redis://localhost:6379/0).
Set TABLEAU_SERVER, TABLEAU_USERNAME, TABLEAU_PASSWORD, TABLEAU_SITE_NAME for Tableau.
Generate a secure SECRET_KEY (32+ characters).
Set CORS_ALLOWED_ORIGINS for React frontend (e.g., ["http://localhost:3000"]).




Run MongoDB Seed Script
python seed_data.py


Start the Backend
python start_server.py


Access API at http://127.0.0.1:8000/api/docs.


Docker Setup (Optional)
docker build -t edupredict .
docker run -p 8000:8000 --env-file .env edupredict


HDFS Setup

Ensure Hadoop is running at HDFS_HOST:HDFS_PORT.
Configure core-site.xml and hdfs-site.xml.


Redis Setup

Ensure Redis is running at REDIS_URL.
Test connectivity: redis-cli ping.


Tableau Setup

Connect to Tableau Server using credentials in .env.
Publish analytics data using tableau_utils.py.



Project Structure

app/core/: Utilities (hdfs_utils.py, database.py, config.py, security.py, redis_utils.py, tableau_utils.py).
app/models/: Pydantic models for data validation.
app/api/: API routes and services.
app/ml/: Machine learning models (e.g., dropout prediction).
requirements.txt: Python dependencies.
Dockerfile: Docker configuration.

Deliverables

Source Code: All files in this repository.
Documentation: This README and inline docstrings.
Test Data: Generated by seed_data.py.
Video Demo: Record a video showing authentication, data ingestion, analytics, and notifications.
Zip File: Package all files with a ReadMe.doc listing assumptions.

Assumptions

MongoDB Atlas is used for primary storage.
Hadoop/HDFS handles large-scale analytics data.
Redis enables real-time notifications.
Tableau Server is used for visualization.
React frontend (not included) connects to API endpoints.

For issues, contact the eProjects Team via email.